using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using AgenaTrader.API;
using AgenaTrader.Custom;
using AgenaTrader.Plugins;
using AgenaTrader.Helper;
using AgenaTrader.UserCode;

/// <summary>
/// 
/// Stopp auf volle 10 Ct runden wegen TWS-Error 110
/// Trendstop am P3, Trendstärke einstellbar.
/// 1. Hardstopp immer für die gesamte Position, wenn Profit überschritten wird.
/// Wird der 1. Hardstopp nachgezogen, dann nur für die Teilposition (einstellbar, min 4.000 €) Position
/// einstellbare Besonderheiten: 
/// Hardstopp (Stop-Order beim Broker) wird erst gesetzt wenn ein einstellbarer Gewinn in Promille zum Stopp aufgelaufen ist (ProfitOnly, Profit)
/// Abstand vom Low des P3-Bars
/// Toleranz bei InsideBars in Ticks
/// Teilverkauf: von der gesamte Position kann auch nur ein Teil mit dem Stopp verkauft werden. Die Mindestordergröße ist aber immer 4.000€. (Mindestprovision)
/// Die Trendstopp-Order liegt immer unter P3 als Stopp-Order bzw bestätigtem P2 im Abwärtstrend (bei Long-Position)
/// Parameter Vollkasko: beim 1. Trendstopp wird die gesamte Position geschützt.
/// bei Softstopp wird Hardstopp an den letzten Stopp nachgezogen wenn das Close unter dem Stopp schließt.
/// Neuer Stop für den REst/2.Tranche kommt im die Mitte zwischen Close[0] und Einstiegspreis (halber Gewinn wird gesichert, von da aus normale Stoppsetzung (im Abwätrstrend auf P2 mit vorhandenem P3?.
/// ToDo: 
/// Graphische Darstellung im Chart fehlt noch.
/// 
/// </summary>

namespace AgenaTrader.UserCode
{
    [Description("Trendstopp als Softstopp mit einstellbarem Volumen")]

    public class Trend_Stop_S : UserStrategy
    {
        #region Variables
        
        private int _trend = 2;                 // Trendgröße
        private int _abstand = 2;               // Abstand in Ticks vom Low
        private double _ATR_Faktor = 1.1;       // ATR-Faktor Abstand Stopp-Limit
        private bool _automatisch = true;       // Stopp-Order wird automatisch aktiviert
        private bool _profitOnly = true;        // Stopp-Order erst über Pr0fit im Promille aktvieren
        private int _teilverkauf = 3;           // Anzahl Teilverkäufe für die Position; Mindeszgröße 4.000 EUR
        private bool _softstopp = true;         // Softstopp statt Hardstopp nach dem 1. Stopp
        public IOrder oTStop = null;           // Trend-Stopp-Order
        private double Stopp = 0.0;
        private DataSeries HStopp;
        private DataSeries SStopp;
        private DataSeries Limit;              // Datensereie für den Stopp
        private int Stueck = 0;                 // Menge zu verkaufen
        private double _profit = 5;             // Mindestprofit in Promille
        private bool _sendMail = true;         // Email nach Ausführung zusenden
        private string stoppName = "Trend ";
        private bool TotalSchutz = true;        // frühestmöglicher Schutz für Gesamtposition nur am 1. Stopp
        private bool _stopLimit = true;         // Stopp-Order als Stopp-Limit-Order
        private Trend_Stopp_I _Trend_Stopp_I;

        #endregion Variables

        protected override void OnInit()
        {
            CalculateOnClosedBar = true;
            HStopp = new DataSeries(this);
            SStopp = new DataSeries(this);
            Limit = new DataSeries(this);
            RequiredBarsCount = 50;
            IsAutoConfirmOrder = _automatisch;
            Abstand = _abstand;
            Teilverkauf = _teilverkauf;
            TraceOrders = true;
            //Set the default time frame if you start the strategy via the strategy-escort
            //if you start the strategy on a chart the TimeFrame is automatically set, this will lead to a better usability
            if (this.TimeFrame == null || this.TimeFrame.PeriodicityValue == 0)
            {
                this.TimeFrame = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);
            }


        }
        protected override void OnStart()
        {
            base.OnStart();
            stoppName = stoppName + _trend;                   // Stopp-name zusammensetzen
            if (TotalSchutz) stoppName = stoppName + " VK";
            if (_stopLimit) stoppName = stoppName + " SL";
            if (_softstopp) stoppName = stoppName + " SS";
            _Trend_Stopp_I = new UserCode.Trend_Stopp_I();
 
        }

        protected override void OnOrderExecution(IExecution execution)
        {

            if (execution.Order != null && execution.Order.OrderState == OrderState.Filled)
            {
                if (oTStop != null && execution.Name == oTStop.Name)
                {
                    if (_sendMail && Core.PreferenceManager.DefaultEmailAddress != "") this.SendEmail(Core.AccountManager.Core.Settings.MailDefaultFromAddress, Core.PreferenceManager.DefaultEmailAddress,
                         execution.Instrument.Symbol + " Order " + execution.Name + " ausgeführt.",
                         execution.Instrument.Symbol + "Trend-Stop-Order " + execution.Name + " ausgeführt. Profit:" + (Trade.ClosedProfitLoss - execution.Commission).ToString("F2"));
                    if (TotalSchutz)
                    {
                        oTStop = null; // Objekt löschen, damit startet Trendstopp erneut.
                        HStopp[0] = Instrument.Round2TickSize((Close[0] - Trade.AvgPrice) / 2 + Trade.AvgPrice);     // Stopp auch in der Serie zurücksetzen
                        HStopp[1] = HStopp[0];
                        SStopp[0] = Instrument.Round2TickSize(Stopp - ATR(Close, 14)[0]);
                        SStopp[1] = SStopp[0];

                    }

                }
            }
        }
        protected override void OnCalculate()
        {
            if (Trade == null || Trade != null && Trade.PositionType == PositionType.Flat)
            {
                AddChartTextFixed("MyText", " Trendstopp aktiv, kein Trade offen ", TextPosition.BottomLeft, Color.Red, new Font("Areal", 14), Color.Blue, Color.Empty, 10);
                if (oTStop != null) oTStop.CancelOrder();
                return;
            }

            //Lets call the calculate method and save the result with the trade action
            //Trend_Stopp_I r1 = UserCode.Trend_Stopp_I.calculate(InSeries, Trend, Abstand, HStopp, SStopp, Limit);
            ResultValue_Trend_Stopp r1 = UserCode.ResultValue_Trend_Stopp.calculate(InSeries, Trend, Abstand, HStopp, SStopp, Limit);
            //If the calculate method was not finished we need to stop and show an alert message to the user.
            if (r1.ErrorOccured)
                {
                 Log(this.DisplayName + ": A problem has occured during the calculation method!", InfoLogLevel.AlertLog);
                 return;
                }
           

            HStopp[0] = r1.SStopp;
            
            DoOrderChek();  // ggf vorhandene Stopp-Order prüfen

            if (Core.PreferenceManager.IsAtrEntryDistance) _abstand = (int)Math.Max(_abstand, ATR(14)[1] * Core.PreferenceManager.AtrEntryDistanceFactor);    // Tick-Abstand

            #region Stueck

                if ((int)(Trade.Quantity * Trade.AvgPrice / 4000) < _teilverkauf)
                    _teilverkauf = (int)(Trade.Quantity * Trade.AvgPrice / 4000);
                if (_teilverkauf <= 1) Stueck = Trade.Quantity;
                else Stueck = (int)(Trade.Quantity / _teilverkauf);

                if (Trade.Quantity * Trade.AvgPrice < 8000) Stueck = Trade.Quantity;


            #endregion Stueck


            #region Trend-Stopp-Berechnung: 
           

                if (HStopp[0] > 0)
                {
                    HStopp[0] = (int)(10 * HStopp[0]);
                    HStopp[0] = HStopp[0] / 10;
                    
                    if(_stopLimit)
                    { 
                        if (Stopp > Trade.AvgPrice)
                        { 
                            Limit[0] = (Instrument.Round2TickSize(Math.Max(((HStopp[0] - Trade.AvgPrice) / 2 + Trade.AvgPrice - _abstand * TickSize), (HStopp[0] - _ATR_Faktor * ATR(14)[0]))));     // Limit auf die Hälfte des Gewinns bzw unter Stopp - 1,5 x ATR
                        }
                        else
                        { 
                            Limit[0] = Instrument.Round2TickSize(HStopp[0] - _ATR_Faktor * ATR(14)[0] - _abstand * TickSize);     // Limit auf die Hälfte des Gewinns bzw unter Stopp - 1,5 x ATR
                        }
                    }
                }
                #endregion Trend-Stopp-Berechnung



                #region Vollkasko
                if (HStopp[0] > 0)
                { 
                    if (TotalSchutz) // 1 Trend-Hardstopp für Gesamtposition setzen, wenn Position Stopp über Profit liegt
                        {
                        if ((oTStop == null || (oTStop != null && oTStop.OrderState == OrderState.Cancelled)) &&
                            (!_profitOnly || (_profitOnly && (HStopp[0] > Instrument.Round2TickSize(((1 + _profit / 1000) * Trade.AvgPrice + _abstand * TickSize))))))
                        {
                        if (_stopLimit)
                            oTStop = SubmitOrder(0, OrderDirection.Sell, OrderType.StopLimit, Trade.Quantity, Limit[0], HStopp[0], "Stopp T", stoppName);
                        else
                            oTStop = SubmitOrder(0, OrderDirection.Sell, OrderType.Stop, Trade.Quantity, 0, HStopp[0], "Stopp T", stoppName);
                        if (_automatisch) oTStop.ConfirmOrder();
                        }

                    }
                    else // 1 Trend-Hardstopp für Teilposition setzen, wenn Position Stopp über Profit liegt
                    {
                        if ((oTStop == null || (oTStop != null && oTStop.OrderState == OrderState.Cancelled)) &&
                            (!_profitOnly || (_profitOnly && (HStopp[0] > Instrument.Round2TickSize(((1 + _profit / 1000) * Trade.AvgPrice + _abstand * TickSize))))))
                        {
                            if (_stopLimit)
                                oTStop = SubmitOrder(0, OrderDirection.Sell, OrderType.StopLimit, Stueck, Instrument.Round2TickSize(Limit[0]), Instrument.Round2TickSize(HStopp[0]), "Stopp B" + _trend, stoppName);
                            else
                                oTStop = SubmitOrder(0, OrderDirection.Sell, OrderType.Stop, Stueck, 0, Instrument.Round2TickSize(HStopp[0]), "Stopp B", stoppName);
                               
                            if (_automatisch) oTStop.ConfirmOrder();

                        }
                    }
                    
                }
                #endregion Vollkasko

                #region Softstopp
                if(Stopp > 0)
                { 
                    if (_softstopp && Close[0] < SStopp[1])
                    {
                        HStopp[0] = Instrument.Round2TickSize(Close[0] - _abstand * TickSize);
                        Limit[0] = Instrument.Round2TickSize(Math.Max(((HStopp[0] - Trade.AvgPrice) / 2 + Trade.AvgPrice - _abstand * TickSize), (HStopp[0] - _ATR_Faktor * ATR(14)[0])));
                        if (oTStop.OrderState != OrderState.Filled && oTStop.OrderState != OrderState.PendingSubmit &&
                            oTStop.OrderState != OrderState.PendingReplace && oTStop.OrderState != OrderState.PartFilled)
                        {
                            if (_stopLimit) ReplaceOrder(oTStop, Stueck, Instrument.Round2TickSize(Limit[0]), Instrument.Round2TickSize(Math.Max(oTStop.StopPrice, HStopp[0])));
                            else ReplaceOrder(oTStop, Stueck, 0, Instrument.Round2TickSize(Math.Max(oTStop.StopPrice, HStopp[0])));
                        }
                    }
                }
                #endregion Softstopp

                #region Hardstopp
                if (Stopp > 0 && oTStop != null)
                {
                    if ((oTStop.StopPrice < Stopp && !_softstopp) || (Stopp > oTStop.StopPrice && oTStop.StopPrice < Trade.AvgPrice))
                    {
                        if (oTStop.OrderState != OrderState.Filled && oTStop.OrderState != OrderState.PendingSubmit &&
                            oTStop.OrderState != OrderState.PendingReplace && oTStop.OrderState != OrderState.PartFilled)
                        {
                            if(Stopp > Instrument.Round2TickSize(((1 + _profit / 1000) * Trade.AvgPrice + _abstand * TickSize)) && oTStop.StopPrice < Trade.AvgPrice && TotalSchutz)    // 1. Stopp einmalig in den Gewinn ziehen.
                            {
                                if (_stopLimit) ReplaceOrder(oTStop, Trade.Quantity, Instrument.Round2TickSize(Limit[0]), Instrument.Round2TickSize(Math.Max(oTStop.StopPrice, SStopp[0])));
                                else ReplaceOrder(oTStop, Trade.Quantity, 0, ( (int)(10 * Instrument.Round2TickSize(Math.Max(oTStop.StopPrice, SStopp[0]))/10)));
                            }
                            else
                            { 
                                if (_stopLimit) ReplaceOrder(oTStop, Stueck, Instrument.Round2TickSize(Limit[0]), Instrument.Round2TickSize(Math.Max(oTStop.StopPrice, SStopp[0])));
                                else ReplaceOrder(oTStop, Stueck, 0, Instrument.Round2TickSize(Math.Max(oTStop.StopPrice, SStopp[0])));
                            }
                        }
                    }
                }
                #endregion Hardstopp


     
            #region Anzeige
            if(Stopp > 0)
            { 
                if (_stopLimit) Print(Bars[0].Time.ToShortTimeString() + " " + Instrument.Symbol + " Stopp: " + HStopp[0].ToString("F2") + " Limit: " + Limit[0].ToString("F2"));
                else Print(Instrument.Symbol + " Stopp: " + HStopp[0].ToString("F2"));
            }
            if (Chart != null)
            {
                //  _Test2Plot.Zeichne(Stopp, oStop.StopPrice);
                if (oTStop == null)
                    AddChartTextFixed("MyText", "Trendstopp aktiv, Trend " + _trend + " Teilverkäufe: " + _teilverkauf, TextPosition.BottomLeft, Color.Red, new Font("Areal", 12), Color.Blue, Color.Empty, 10);
                else
                {
                    if (oTStop.OrderState == OrderState.Filled)
                        AddChartTextFixed("MyText", "Trendstopp ausgeführt", TextPosition.BottomLeft, Color.Red, new Font("Areal", 14), Color.Blue, Color.Empty, 10);
                    else
                      if (_softstopp)
                        AddChartTextFixed("MyText", "Softstopp aktiv, Trend " + _trend + " Softstopp: " + Stopp.ToString("F2") +
                          " G/V " + ((oTStop.StopPrice - Trade.AvgPrice) * Stueck).ToString("F2") + " € ", TextPosition.BottomLeft, Color.Red, new Font("Areal", 12), Color.Blue, Color.Empty, 10);
                    else
                    {
                        if (_stopLimit)
                            AddChartTextFixed("MyText", "Trendstopp aktiv, Trend " + _trend +
                              " G/V " + ((oTStop.LimitPrice - Trade.AvgPrice) * Stueck).ToString("F2") + " € ", TextPosition.BottomLeft, Color.Red, new Font("Areal", 12), Color.Blue, Color.Empty, 10);
                        else
                            AddChartTextFixed("MyText", "Trendstopp aktiv, Trend " + _trend +
                              " G/V " + ((oTStop.StopPrice - Trade.AvgPrice) * Stueck).ToString("F2") + " € ", TextPosition.BottomLeft, Color.Red, new Font("Areal", 12), Color.Blue, Color.Empty, 10);
                    }
                }      
            }
            #endregion Anzeige
        }


        protected void DoOrderChek()
        { 
        #region vorhandene Stop- oder StopLimit-Order holen, falls eine vorhanden ist und noch nicht von der Strategie verwaltet wird
            if (oTStop == null && Orders.Count > 0)
                {
                    int i = 0;
                    do
                    {
                        if (Orders[i].Direction == OrderDirection.Sell && Orders[i].OrderState != OrderState.Filled && (Orders[i].OrderType == OrderType.Stop || Orders[i].OrderType == OrderType.StopLimit))
                        {
                            oTStop = Orders[i];

                            HStopp[0] = Orders[i].StopPrice;
                            Limit[0] = Orders[i].LimitPrice;
                            if (Orders[i].OrderType == OrderType.Stop) _stopLimit = false;
                            else _stopLimit = true;
                        }
                        ++i;
                    } while (i<Orders.Count);
                }
            #endregion
        }

        #region Properties

        [Description("Anzahl Teilverkäufe")]
        [Category("Parameters")]
        public int Teilverkauf
        {
            get { return _teilverkauf; }
            set { _teilverkauf = value; }
        }

        [Description("nur Gewinn-Stopp")]
        [Category("Parameters")]
        public bool ProfitOnly
        {
            get { return _profitOnly; }
            set { _profitOnly = value; }
        }


        [Description("Soft-Stopp statt Hardstopp")]
        [Category("Parameters")]
        public bool SoftStopp
        {
            get { return _softstopp; }
            set { _softstopp = value; }
        }

        [Description("Mindest-Profit in Promille")]
        [Category("Parameters")]
        public double Profit
        {
            get { return _profit; }
            set { _profit = Math.Max(0, value); }
        }


        [Description("Trendgrösse (0 -3)")]
        [Category("Parameters")]
        public int Trend
        {
            get { return _trend; }
            set { _trend = Math.Min(3,Math.Max(value, 0)); }
        }


        [Description("Tick-Abstand")]
        [Category("Parameters")]
        public int Abstand
        {
            get { return _abstand; }
            set { _abstand = value; }
        }


        [Description("ATR-Faktor Abstand Stopp-Limit-Preis")]
        [Category("Parameters")]
        public double ATR_Faktor
        {
            get { return _ATR_Faktor; }
            set { _ATR_Faktor = value; }
        }


        [Description("Stopp-Limit-Order")]
        [Category("Parameters")]
        public bool StopLimit
        {
            get { return _stopLimit; }
            set { _stopLimit = value; }
        }

        [Description("Vollkasko für die Gesamtposition")]
        [Category("Parameters")]
        public bool Vollkasko
        {
            get { return TotalSchutz; }
            set { TotalSchutz = value; }
        }
        

        [Description("SendMail")]
        [Category("Parameters")]

        public bool SendMail
        {
            get { return _sendMail; }
            set { _sendMail = value; }
        }
    }
}
        #endregion Properties