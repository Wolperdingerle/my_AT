using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using AgenaTrader.API;
using AgenaTrader.Custom;
using AgenaTrader.Plugins;
using AgenaTrader.Helper;

namespace AgenaTrader.UserCode
{
    
    /// <summary>
    /// Class which holds all important data like the OrderDirection. 
    /// We use this object as a global default return object for the calculate method in indicators.
    /// </summary>
    public class ResultValue_Trend_Stopp
    {
        public bool ErrorOccured = false;
        public double HStopp = 0.0;
        public double SStopp = 0.0;
        public double Limit = 0.0;
        //public int Trend = 2;
        //public int Abstand = 2;
    }
    
    [Description("Basic indicator Trend-Stopp")]
    public class Trend_Stopp_I : UserIndicator
	{
        #region Variable für die Plots
        //input
        //input Eigenschafte der Plots
        // Hardstopp
        private Color _plot0color = Color.Red;
        private int _plot0width = 2;
        private DashStyle _plot0dashstyle = DashStyle.Solid;

        // Softstopp
        private Color _plot1color = Color.Blue;
        private int _plot1width = 2;
        private DashStyle _plot1dashstyle = DashStyle.Dash;

        // Limit
        private Color _plot2color = Color.DodgerBlue;
        private int _plot2width = 2;
        private DashStyle _plot2dashstyle = DashStyle.DashDot;
        // intern
        private int stueck;
        private DateTime startZeit;

        #endregion Variable
        

        protected override void OnInit()
		{
            //Define the plots and its color which is displayed in the chart
            Add(new OutputDescriptor(Plot0Color, "Hard_Stopp"));
            Add(new OutputDescriptor(Plot1Color, "Soft_Stopp"));
            Add(new OutputDescriptor(Plot2Color, "Limit"));
            RequiredBarsCount = 10;
            IsOverlay = true;
            
        }

		protected override void OnCalculate()
		{
            if (TradeInfo == null || (TradeInfo != null && (TradeInfo.Quantity == 0) )) return;     // kein Trade offen
            #region Timeframe
            //Check if peridocity is valid for this script
            if (!DatafeedPeriodicityIsValid(Bars.TimeFrame))
            {
                Log(this.DisplayName + ": Zeitbasierter Chart erforderlich!", InfoLogLevel.AlertLog);
                return;
            }
            #endregion Timeframe
            
            if(TradeInfo.Quantity != stueck)   // Kauf oder Teilverkauf hat stattgefunden
            {
                stueck = TradeInfo.Quantity;
                startZeit = Bars[0].Time;
                _stopp = 0;
            }

            #region Trend-Stopp-Berechnung: 
            if (P123Adv(_trend).ValidP3Price[0] > P123Adv(_trend).P1Price[0] && P123Adv(_trend).ValidP3DateTime[0] > P123Adv(_trend).P1DateTime[0])
                _stopp = Instrument.Round2TickSize(Math.Max(_stopp, (P123Adv(_trend).ValidP3Price[0] - _abstand * TickSize)));       //im Aufwärtstrend: P3 gültig
            else if (P123Adv(_trend).ValidP3Price[0] < 1 && P123Adv(_trend).P2Price[0] > P123Adv(_trend).P1Price[0] && P123Adv(_trend).P2DateTime[0] > P123Adv(_trend).P1DateTime[0])
                _stopp = Instrument.Round2TickSize(Math.Max(_stopp, (P123Adv(_trend).P1Price[0]) - _abstand * TickSize));            // im Aufwärtsttrend, noch kein P3 vorhanden,  Stopp am P1
            else if (P123Adv(_trend).P2Price[0] < P123Adv(_trend).P1Price[0] && P123Adv(_trend).TempP3DateTime[0] > P123Adv(_trend).P2DateTime[0]
                   && P123Adv(_trend).P2DateTime[0] < P123Adv(_trend).TempP3DateTime[0])
                _stopp = Instrument.Round2TickSize(Math.Max(_stopp, (P123Adv(_trend).P2Price[0]) - _abstand * TickSize));           //im Abwärstrend: TempP3 gültig, Stopp am letzten P2
            else if (TradeInfo != null && P123Adv(_trend).P2DateTime[0] < startZeit)
                _stopp = Instrument.Round2TickSize(Math.Max(_stopp, (P123Adv(_trend).P2Price[0]) - _abstand * TickSize));           //im Abwärtstrend: P2 vor Kauf, Stopp am gültigen P2
            #endregion
            
            // zeige die Werte nur an, wenn > 0
            // nur zum Test


            //if (_hstopp > 0) Hard_Stopp.Set(_hstopp);   // zeigt Verlauf Hardstopp
            if (_stopp > 0) Soft_Stopp.Set(_stopp);     // zeigt Verlauf Softstopp
            //if (_limit > 0) Limit.Set(_limit);          // zeigt bei Stop-Limit-Order den Limit-Preis

            //Lets call the calculate method and save the result with the trade action
            ResultValue_Trend_Stopp returnvalue = ResultValue_Trend_Stopp.calculate(InSeries, Trend, Abstand, Hard_Stopp, Soft_Stopp, Limit);

            //If the calculate method was not finished we need to stop and show an alert message to the user.
            
            if (returnvalue.ErrorOccured)
            {
                Log(this.DisplayName + ": A problem has occured during the calculation method!", InfoLogLevel.AlertLog);
                return;
            }
            


            #region Ploteinstellungen ändern
            //Set the drawing style, if the user has changed it.
            PlotColors[0][0] = this.Plot0Color;
            OutputDescriptors[0].PenStyle = this.Dash0Style;
            OutputDescriptors[0].Pen.Width = this.Plot0Width;
            PlotColors[1][0] = this.Plot1Color;
            OutputDescriptors[1].PenStyle = this.Dash1Style;
            OutputDescriptors[1].Pen.Width = this.Plot1Width;
            PlotColors[2][0] = this.Plot2Color;
            OutputDescriptors[2].PenStyle = this.Dash2Style;
            OutputDescriptors[2].Pen.Width = this.Plot2Width;
            #endregion
        }
        
        /// <summary>
        /// Calculate Methode Resultvalue_Indicator_Trend_Stopp; Rückgabe: Objekt resultvalue
        /// </summary>
        /// <param name="data"></param>
        /// <param name="Trend"></param>
        /// <param name="Abstand"></param>
        /// <param name="Hard_Stopp"></param>
        /// <param name="Soft_Stopp"></param>
        /// <param name="Limit"></param>
        /// <returns></returns>
        /// 

        public static ResultValue_Trend_Stopp calculate(IDataSeries data, int Trend, int Abstand, IDataSeries Hard_Stopp, IDataSeries Soft_Stopp, IDataSeries Limit)
        {
            //Create a return object
            Trend_Stopp_I returnvalue = new Trend_Stopp_I();

            //try catch block with all calculations
            try
            {
                //Calculate SMA and set the data into the result object
        
                returnvalue.HStopp = Hard_Stopp[0];
                returnvalue.SStopp = Soft_Stopp[0];
                returnvalue.Limit = Limit[0];

            }
            catch (Exception)
            {
                //If this method is called via a strategy or a condition we need to log the error.
                returnvalue.ErrorOccured = true;
            }

            //return the result object
            return returnvalue;
        }
        

        #region Properties
        // Beginn Qutput
        [Browsable(false)]
		[XmlIgnore()]
		public DataSeries Hard_Stopp
		{
			get { return Outputs[0]; }
           // set { Hard_Stopp[0] = value[0]; }       // eiggefügt Schreiben in Hardstopp
        }

		[Browsable(false)]
		[XmlIgnore()]
		public DataSeries Soft_Stopp
		{
			get { return Outputs[1]; }
           // set { Soft_Stopp[0] = value[0]; }       // eiggefügt Schreiben in Softstopp
        }

		[Browsable(false)]
		[XmlIgnore()]
		public DataSeries Limit
		{
			get { return Outputs[2]; }
		}
        // Ende Qutput
        // Begiunn Input-Parameter

        [InputParameter]
		public int Trend
		{
			get { return _trend; }
			set { _trend = Math.Max(0, value); }
		}
		private int _trend = 2;

		[InputParameter]
		public int Abstand
		{
			get { return _abstand; }
			set { _abstand = Math.Max(0, value); }
		}
		private int _abstand =2;

        //      [Sonstiges]
        public double Stopp
        {
            get { return _stopp; }
            set { _stopp = value;}
        }
        private double _stopp;
        // Ende Input-Parameter


  //      [Sonstiges]
        public double HStopp
        {
            get { return _hstopp; }
            set { _hstopp = value; }
        }
        private double _hstopp;


        //      [Sonstiges]
        public double Limitd
        {
            get { return _limit; }
            set { _limit = value; }
        }
        private double _limit;
        // Ende Input-Parameter

        /// <summary>
        /// defines display name of indicator (e.g. in AgenaTrader chart window)
        /// </summary>
        /// <returns></returns>
        
        public override string ToString()
        {
            return "Trend_Stopp (I)";
        }

        /// <summary>
        /// defines display name of indicator (e.g. in AgenaTrader indicator selection window)
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return "Trend_Stopp (I)";
            }
        }

    
        /// <summary>
        /// True if the periodicity of the data feed is correct for this indicator.
        /// </summary>
        /// <returns></returns>
        public bool DatafeedPeriodicityIsValid(ITimeFrame timeframe)
        {
            TimeFrame tf = (TimeFrame)timeframe;
            if (tf.Periodicity == DatafeedHistoryPeriodicity.Day || tf.Periodicity == DatafeedHistoryPeriodicity.Hour || tf.Periodicity == DatafeedHistoryPeriodicity.Minute)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// </summary>
        [Description("Select Color für Hard-Stopp.")]
        [Category("Plots")]
        [DisplayName("Color Hard-Stopp")]
        public Color Plot0Color
        {
            get { return _plot0color; }
            set { _plot0color = value; }
        }
        // Serialize Color object
        [Browsable(false)]
        public string Plot0ColorSerialize
        {
            get { return SerializableColor.ToString(_plot0color); }
            set { _plot0color = SerializableColor.FromString(value); }
        }

        /// <summary>
        /// </summary>
        [Description("Line für Hard-Stopp.")]
        [Category("Plots")]
        [DisplayName("Line für Hard-Stopp")]
        public int Plot0Width
        {
            get { return _plot0width; }
            set { _plot0width = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("DashStyle für Hard-Stopp.")]
        [Category("Plots")]
        [DisplayName("DashStyle Hard-Stopp")]
        public DashStyle Dash0Style
        {
            get { return _plot0dashstyle; }
            set { _plot0dashstyle = value; }
        }


        /// <summary>
        /// </summary>
        [Description("Select Color für Soft-Stopp.")]
        [Category("Plots")]
        [DisplayName("Color Soft-Stopp")]
        public Color Plot1Color
        {
            get { return _plot1color; }
            set { _plot1color = value; }
        }
        // Serialize Color object
        [Browsable(false)]
        public string Plot1ColorSerialize
        {
            get { return SerializableColor.ToString(_plot1color); }
            set { _plot1color = SerializableColor.FromString(value); }
        }

        /// <summary>
        /// </summary>
        [Description("Line width für Soft-Stopp.")]
        [Category("Plots")]
        [DisplayName("Line Soft-Stopp")]
        public int Plot1Width
        {
            get { return _plot1width; }
            set { _plot1width = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("DashStyle für Soft-Stopp.")]
        [Category("Plots")]
        [DisplayName("DashStyle Soft-Stopp")]
        public DashStyle Dash1Style
        {
            get { return _plot1dashstyle; }
            set { _plot1dashstyle = value; }
        }


        [Description("Select Color für Limit.")]
        [Category("Plots")]
        [DisplayName("Color Limit")]
        public Color Plot2Color
        {
            get { return _plot2color; }
            set { _plot2color = value; }
        }
        // Serialize Color object
        [Browsable(false)]
        public string Plot2ColorSerialize
        {
            get { return SerializableColor.ToString(_plot2color); }
            set { _plot2color = SerializableColor.FromString(value); }
        }

        /// <summary>
        /// </summary>
        [Description("Linenbreite für Limit.")]
        [Category("Plots")]
        [DisplayName("Linenbreite Limit")]
        public int Plot2Width
        {
            get { return _plot2width; }
            set { _plot2width = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("DashStyle für Limit Linie.")]
        [Category("Plots")]
        [DisplayName("DashStyle Limit")]
        public DashStyle Dash2Style
        {
            get { return _plot2dashstyle; }
            set { _plot2dashstyle = value; }
        }


        #endregion
    }
}